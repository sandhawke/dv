#!/bin/bash
set -euo pipefail

# Source common functions
source "$(dirname "$0")/../lib/dv-version-functions.sh"

create_seq_version() {
    local prev_version="$1"

    # Handle special version IDs
    if [ "$prev_version" = "latest" ]; then
        prev_version=$(find_highest_seq ".dv/versions")
        log "Latest version resolved to sequence number $prev_version"
    fi

    # Generate new version number
    local new_version=$(($(find_highest_seq ".dv/versions") + 1))
    log "Created new version ID: $new_version"

    # Create version directory
    log "Creating version directory .dv/versions/$new_version"
    mkdir -p ".dv/versions/$new_version"

    # Copy previous version contents if applicable
    if [ "$prev_version" != "null" ]; then
        if [ -d ".dv/versions/$prev_version" ]; then
            log "Copying content from version $prev_version"
            # Build rsync exclude options
            local rsync_opts=(-a --quiet --exclude='.git' --exclude='.commit-message' --exclude='.dv')
            if [ -f ".gitignore" ]; then
                log "Using .gitignore exclusions"
                rsync_opts+=(--exclude-from='.gitignore')
            fi
            rsync "${rsync_opts[@]}" ".dv/versions/$prev_version/" ".dv/versions/$new_version/"
        fi
    else
        log "Starting with empty directory (null previous version)"
    fi

    # Update latest symlink
    update_latest_symlink "$new_version"

    # Write save file
    if [ -n "$SAVE_ID" ]; then
        log "Writing version ID to $SAVE_ID"
        echo "$new_version" > "$SAVE_ID"
    fi

    # Enter interactive shell
    enter_shell ".dv/versions/$new_version" "$EXEC_CMD"
}

# Run main
create_seq_version "$PREV_VERSION"
