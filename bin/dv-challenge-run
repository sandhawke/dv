#!/bin/bash
source $(dv-path lib/common.sh) # -*-mode: sh-mode -*-

: ${DV_INSTALL:=node20-a}
: ${DV_SEQ:=dv-sequence-with-sprints}

challenge=$1
shift

challenge_dir=$(dv-path challenges/$challenge)
if [ ! -d $challenge_dir ]; then
    log_error Not found $challenge_dir
    exit 1
fi

key="$(basename "$challenge")"
cell="$(dv-cell-create "$key" "$@")"
log="$cell/.dv/challenge"
if [ -d "$log" ]; then
    log_error "Log dir $log already exists"
    exit 1
fi
mkdir -p "$log"
printenv | grep -v KEY | grep DV_ > "$log/env"
date -uIns > "$log/start"

cd "$challenge_dir/starting_files"
rsync -avv . "$cell"

# we could just --ignore these, but they seem more a cause for concern
if [ -d "$cell/_to_developer" ]; then
    log_error $PWD seems to have a _to_developer
    exit 1
fi

cd "$cell"
git add -A; git commit -m"starting files for challenge '$challenge'"

## Pick a system to install?  That's a indep. var, right?
dv-install cltest
dv-install "$DV_INSTALL"

export DV_IN_SEQ=true

run="$challenge_dir/run.sh"
if [ -f "$run" ]; then
    bash "$run" || log_warning "$run non-zero exit"
else
    log_info "Starting $DV_SEQ"
    $DV_SEQ
    if [[ $(dv-test) = 'pass' ]]; then
        date > .dv/challenge-pass
        log_success "dv-challenge-run completed successfully in $cell"
        echo "pass" > "$log/pass"
        echo "pass" > "$log/status"
    else
        date > .dv/challenge-fail
        log_warning "dv-challenge-run failed in $cell"
        echo "fail" > "$log/fail"
        echo "fail" > "$log/status"
    fi
fi

date -uIns > "$log/stop"

# log_info checking to see if any test files were altered
changed_files="/tmp/$(uuidgen | cut -c 25-)"
cd "$challenge_dir/starting_files"
rsync --backup --backup-dir="$changed_files" . "$cell"
if [ -d "$changed_files" ]; then
    log_error "Challenger modified challenge files. Mods in $changed_files"
    echo "Cheated, modified $(ls "$changed_files")" > "$log/cheated"

    date > .dv/challenge-fail
    log_warning "dv-challenge-run failed BY CHEATING in $cell"
    echo "fail" > "$log/fail"
    echo "fail" > "$log/status"
    exit 1
fi

