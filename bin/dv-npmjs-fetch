#!/bin/bash

# Configuration
DOCS_DIR="docs/external-dependencies"
SEARCH_PREFIX="search-"
RESPONSE_PREFIX="response-"

# Ensure the docs directory exists
mkdir -p "$DOCS_DIR"

# Function to validate search file format
validate_search_file() {
    local file="$1"
    local valid=true
    
    # Check for required variables
    if ! grep -q "^SEARCH=" "$file"; then
        echo "Error: Missing SEARCH variable in $file"
        valid=false
    fi
    if ! grep -q "^PURPOSE=" "$file"; then
        echo "Error: Missing PURPOSE variable in $file"
        valid=false
    fi
    
    $valid
}

# Function to extract variable from file
get_var() {
    local file="$1"
    local var="$2"
    grep "^$var=" "$file" | cut -d'=' -f2-
}

# Function to search npm and generate response
process_search_file() {
    local search_file="$1"
    local base_name=$(basename "$search_file" | sed "s/^$SEARCH_PREFIX//")
    local response_file="$DOCS_DIR/$RESPONSE_PREFIX$base_name"
    
    # Extract search terms and purpose
    local search_terms=$(get_var "$search_file" "SEARCH")
    local purpose=$(get_var "$search_file" "PURPOSE")
    
    echo "Processing search for: $search_terms"
    echo "Purpose: $purpose"
    
    # Create response file with header
    {
        echo "# NPM Package Search Results"
        echo "## Search Query: $search_terms"
        echo "## Purpose: $purpose"
        echo "## Date: $(date '+%Y-%m-%d %H:%M:%S')"
        echo
        echo "## Top Matching Packages"
        echo
        
        # Search npm registry and format results
        # Get top 10 packages sorted by popularity
        npm search --json "$search_terms" | jq -r '.[] | select(.score.final > 0.5) | [.name, .version, .description, (.score.final * 100 | floor | tostring + "%"), .links.npm] | @tsv' | \
        sort -k4,4rn | head -n 10 | \
        while IFS=$'\t' read -r name version description score npm_link; do
            echo "### $name (v$version) - Match Score: $score"
            echo
            echo "Description: $description"
            echo
            echo "Package URL: $npm_link"
            echo
            # Fetch additional metadata
            echo "#### Additional Details"
            npm view "$name" --json | jq -r '. | "- Downloads (last month): \(.downloads.npm)\n- License: \(.license)\n- Last Updated: \(.time.modified)\n- Dependencies: \(.dependencies | length // 0)"' 2>/dev/null || echo "- Detailed stats unavailable"
            echo
        done
        
        echo "## Notes"
        echo "- Results are sorted by npm relevance score"
        echo "- Only packages with a match score >50% are shown"
        echo "- Please verify license compatibility before using any package"
    } > "$response_file"
    
    echo "Generated response file: $response_file"
}

# Main process
echo "Processing search files in $DOCS_DIR..."

# Process all search files
find "$DOCS_DIR" -name "${SEARCH_PREFIX}*" -type f | while read -r file; do
    if validate_search_file "$file"; then
        process_search_file "$file"
    fi
done

echo "Search processing complete"
