#!/bin/bash
source $(dv-path lib/common.sh) # -*-mode: sh-mode -*-

cmd=$(basename $0)
usage() {
    cat <<EOF

Usage: $cmd [--help] [--prompt=PROMPT] PATH...
Feed the given paths to the AI with the given prompt. Will only modify files
that are checked in and clean.

Options:
  --help           Show this help message and exit
  --prompt=PROMPT  Use PROMPT string or saved prompt by name

Saved prompts found in $(dv-path prompts)
EOF
    exit 1
}

prompt=""
paths=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            usage
            ;;
        --prompt=*)
            prompt=$(cut <<<"$1" -c 10-)
            shift
            ;;
        --prompt)
            if [ -z "$2" ]; then
                echo "Error: --prompt requires an argument" >&2
                exit 1
            fi
            prompt="$2"
            shift 2
            ;;
        *)
            paths+=("$1")
            shift
            ;;
    esac
done

if [ ${#paths[@]} -eq 0 ]; then
    echo "Error: At least one PATH is required. Use '.' for the whole directory." >&2
    usage
fi

if [ -z "$prompt" ]; then
    echo "Prompt is required."
    usage
fi

# Process prompt if provided
if [ -n "$prompt" ] && [[ ! "$prompt" =~ " " ]] && [[ ! "$prompt" =~ "/" ]]; then
    prompt_file="$(dv-path prompts)/$prompt"
    prompt=$(< $prompt_file)
fi

# Print gathered values
echo "Prompt: $prompt"
arguments "${paths[@]}"

exit 
# until we have a version of llpipe that stashes this reliably, then
# we could just have this be a pipe

infile=$( mktemp --tmpdir dv-general-step-in-XXXXXX.mime)
outfile=$(mktemp --tmpdir dv-general-step-out-XXXXXX.mime)
response_prompt=$(< $(dv-path/prompts/response-prompt.md))

mkdir -p .dv/to-and-from

dv-coding-pre
echo running packmime
packmime user-prompt=$"$prompt" "${paths[@]}" --ignore=.dv --include=_to_developer --ignore=_from_developer --ignore=package-lock.json response-format-instructions=$"$response_prompt" > $infile
t=$(dv-timestamp)
cp -a _to_developer .dv/to-and-from/$t-to
cp -a $infile .dv/to-and-from/$t-to

info Sending $infile to LLM...
export LLPIPE_LOG_RESPONSE=.dv/to-and-from/$t-to/response-headers.txt
time llpipe <$infile >$outfile

unpack=$(unpackmime --patch $outfile)
echo $unpack

from=.dv/to-and-from/$(dv-timestamp)-from
info saving _from_developer to $from
mkdir -p "$from"
echo "$unpack" > "$from"/unpack.txt
cp -a _from_developer "$from"
cp -a $outfile "$from"
if [ -f explanation ]; then
    cp -a explanation "$from"
fi

dv-coding-post

info "Using $infile $outfile"
