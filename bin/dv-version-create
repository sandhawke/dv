#!/bin/bash
set -euo pipefail

# Default values
EXEC_CMD="bash -i"
SAVE_ID=""
PREV_VERSION=""
QUIET=false

# Source common functions
source "$(dirname "$0")/../lib/dv-version-functions.sh"

usage() {
    local self
    self=$(basename "$0")
    cat <<-EOF
Usage: $self [options] <previous-version-id>
Set up a directory tree with data from a previous version and run a command
to modify the state, thus creating a new version. Supports multiple versioning
schemes:
 - in mode "git", check that we're in a clean git directory, make the changes, then
   do git add -all; git commit -m"\$COMMIT_MESSAGE". The message comes from
   .commit_message or contains the executed command.
 - in mode "uuid", make a directory .dv/versions/\$id, where \$id is a new uuid. Copy
   the previous contents there. Set .dv/versions/latest as symlink to point here.
 - in mode "seq", same as uuid, except use next higher sequential integer, starting
   with 1
<previous-version-id> depends on which versioning scheme, but allows
"null" and "latest", in addition to specific ids.
options:
  --exec=<shell command>  Shell command to run, defaults to "bash -i"
  --mode=git/seq/uuid     Overrides settings, specify versioning system
  --save-id=<filename>    Where to write the id of this version
  --quiet                 Suppress diagnostic messages
Examples:
  $self --exec='npm init -y' null
EOF
}

# Determine default mode based on .git existence
if [ -d ".git" ]; then
    MODE="git"
else
    MODE="seq"
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --mode=*)
            MODE="${1#*=}"
            if [[ ! "$MODE" =~ ^(git|seq|uuid)$ ]]; then
                echo "Error: Invalid mode. Must be git, seq, or uuid" >&2
                exit 1
            fi
            ;;
        --exec=*)
            EXEC_CMD="${1#*=}"
            ;;
        --save-id=*)
            SAVE_ID="${1#*=}"
            ;;
        --quiet)
            QUIET=true
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            if [ -z "$PREV_VERSION" ]; then
                PREV_VERSION="$1"
            else
                echo "Error: Unexpected argument: $1" >&2
                usage
                exit 1
            fi
            ;;
    esac
    shift
done

# Check for required argument
if [ -z "$PREV_VERSION" ]; then
    usage
    exit 1
fi

# Export variables needed by mode-specific scripts
export EXEC_CMD SAVE_ID PREV_VERSION QUIET

# Call appropriate mode-specific script
script_dir=$(dirname "$0")
case "$MODE" in
    git)
        exec "$script_dir/dv-version-create-git" "$PREV_VERSION"
        ;;
    seq)
        exec "$script_dir/dv-version-create-seq" "$PREV_VERSION"
        ;;
    uuid)
        exec "$script_dir/dv-version-create-uuid" "$PREV_VERSION"
        ;;
esac
