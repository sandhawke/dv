#!/bin/bash
source $(dv-path lib/common.sh) # -*-mode: sh-mode -*-

spec="$1"
me=pkgsearch
pref="${STRUCT_PREFIX:-${me}_}"
state="${DV_OUTPUT_TO}" # required to be set by calle

start_dir="$PWD"

# Set DV_RESUME=true to just continue from where you left off in the
# repo. You might need to roll back the cleanup first.
if [[ -z "${DV_RESUME:-}" ]]; then
    cell=$(dv-cell-create $me)
    cd "$cell"
    echo "$PWD" > "$state/cell"

    dv-settings auto-commit=true

    echo "$spec" > docs/request.md
    git add docs/request.md && git commit -q -m'spec passed in by caller'
fi

search_file_guide='Start the file with "#!/bin/bash", then the line "set -x" to help show which search results are from each command.

Suggested search and retrieval commands:
* npm search --searchlimit=5 --json "...search terms..."
* npm show "...package name..." readme
* googler --count=5 --exact --json "...search terms..."
* wget "...url to fetch..."

Other commands may work as well. It is okay to experiment.
'

function clean_exit() {
    exit 0
    ## there's no need to clean up, this is a single-use cell!
    local commit=''
    for file in search.sh search-results.txt guide.md package-found.txt package-not-available.txt search-stderr.txt; do
        if [[ -f "$file" ]]; then
            rm "$file"
            git add "$file"
            commit='git commit -q -m"remove agent coordination files"'
        fi
    done
    eval "$commit"
    exit 0
}

for count in {1..5}; do
    log_info "\n\npackage search count = $count\n\n"
    
    if [[ ! -f 'search.sh' ]]; then
        log_info no search.sh
        dv-edit -T'What NPM packages provide the functionality described in the attached file docs/request.md? There may be attached notes giving information about options and search that have been tried before. Please write a set of search commands to help us find the best option. Respond by attaching a bash script called "search.sh" which makes several expert searches to find out what might be available.' -T"$search_file_guide" .
    fi

    if [[ ! -f 'search-results.txt' || 'search.sh' -nt 'search-results.txt' ]]; then
        log_info 'missing or out-of-date search-results.txt -- searching'
        : ${DV_TIMEOUT:=60}
        ((timeout --verbose $DV_TIMEOUT bash search.sh 2>&1 || true) | tee search-results.txt) 
        log_info "$(wc search*)"
        git add search-results.txt && git commit -q -m'search results from execution of search.sh'
    fi
    
    if [[ ! -f guide.md ]]; then
        log_info no guide.md
        # extra size of search results
        dv-edit --maxlen=300000 -T'As an expert software engineer, consider the results provided to the given searches. Is there a package in these results which provides what we need, as expressed in docs/request.md? If so, attach a file guide.md, which consisely explains, with code samples, how to use this package to do essentially what is requested. (If more than 20 lines of code are needed to adapt this module to our needs, reject it, so that we can handle to situation in a cleaner way.) If we are accepting a module, also attach a file package-found.txt that contains just the name of the package. At the end of guide, include a brief explanation of why this package is better than alternatives, including any popularity and quality metrics you have.

If these search results do not give you enough information to do that with confidence, you have two options.

You may stop the search, having concluded there is no available package that meets our needs. In this case, signal this situation by explaining briefly in a file called "package-not-available.txt". In that file, show the text of requirements you have concluded will not be met by any available package, and explain how your search results show they are not likely to be available.

Or, you can search again. First, explain the journey so far. What was searched for, what was found, and how do you think we could search differently to get better results? Put this story in a file with a descriptive name in team-notes. Then, write an entirely new "search.sh" file, which will be executed for you to get more results and try again.' -T"$search_file_guide" .
    fi

    if [[ -f package-not-available.txt ]]; then
        log_info search agent giving up $PWD
        echo "concluded package-not-available on round $count" > "$state/status"
        clean_exit
    fi

    if [[ -f package-found.txt ]]; then
        pkg=$(<package-found.txt)
        if [[ "$pkg" =~ [^@a-zA-Z0-9_-] ]]; then
            # we even allow upper case, which they don't
            echo "Package id violates NPM rules"
            exit 1
        fi
        log_info "search agent found package: $pkg"
        
        cp guide.md "$state/guide.md"
        echo "$pkg" > "$state/name"
        echo "declared success in round $count" > "$state/status"
        clean_exit
    fi
done

log_warning 'still in search loop when limit reached'

echo "still searching after round $count" > "$state/status"
clean_exit
    
    
