#!/bin/bash
source $(dv-path lib/common.sh) # -*-mode: sh-mode -*-#!/bin/bash
# from https://claude.ai/chat/5543dc1b-4459-433d-b147-fb30d036d11a

usage() {
    echo "Usage: $0 [files/directories] [--include=pattern] [--ignore=pattern]..."
    echo "If no files/directories provided, scans current directory"
    echo "Automatically loads patterns from .gitignore and .dv/nopack.txt if they exist"
    echo "Patterns follow .gitignore format:"
    echo "  - '*' matches anything except '/'"
    echo "  - '**' matches zero or more directories"
    echo "  - leading '/' anchors to root"
    echo "  - trailing '/' matches directories"
    echo "  - simple patterns match recursively"
    exit 1
}

# Convert gitignore pattern to regex
pattern_to_regex() {
    local pattern=$1
    local regex=""
    
    # Skip empty lines and comments
    [[ -z "$pattern" || "$pattern" == \#* ]] && return
    
    # Handle leading slash
    if [[ $pattern == /* ]]; then
        regex="^"
        pattern="${pattern#/}"
    else
        regex="^(?:.*/)??"
    fi
    
    # Handle trailing slash
    if [[ $pattern == */ ]]; then
        pattern="${pattern%/}"
        local trailing_slash="/"
    else
        local trailing_slash="/??"
    fi
    
    # Convert pattern to regex
    pattern="${pattern//\./\\.}"  # Escape dots
    pattern="${pattern//\*/[^/]*}"  # Convert * to non-slash matching
    pattern="${pattern//\*\*/.*}"   # Convert ** back to general matching
    
    echo "${regex}${pattern}${trailing_slash}\$"
}

# Load patterns from a file
load_patterns() {
    local file=$1
    local -n patterns=$2  # nameref to array
    
    if [[ -f "$file" ]]; then
        while IFS= read -r pattern; do
            local regex=$(pattern_to_regex "$pattern")
            [[ -n "$regex" ]] && patterns+=("$regex")
        done < "$file"
    fi
}

# Initialize arrays
declare -a include_patterns=()
declare -a ignore_patterns=()
declare -a base_paths=()

# Load ignore patterns from .gitignore and .dv/nopack.txt
load_patterns ".gitignore" ignore_patterns
load_patterns ".dv/nopack.txt" ignore_patterns

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --include=*)
            pattern="${1#*=}"
            regex=$(pattern_to_regex "$pattern")
            [[ -n "$regex" ]] && include_patterns+=("$regex")
            shift
            ;;
        --ignore=*)
            pattern="${1#*=}"
            regex=$(pattern_to_regex "$pattern")
            [[ -n "$regex" ]] && ignore_patterns+=("$regex")
            shift
            ;;
        --help|-h)
            usage
            ;;
        --*)
            echo "Unknown option: $1"
            usage
            ;;
        *)
            base_paths+=("$1")
            shift
            ;;
    esac
done

# Create temporary files
temp_base=$(mktemp)
temp_includes=$(mktemp)
temp_all=$(mktemp)

# Clean up temporary files on exit
trap 'rm -f "$temp_base" "$temp_includes" "$temp_all"' EXIT

# Get base files list
if [ "${#base_paths[@]}" -gt 0 ]; then
    # Process provided files and directories
    for path in "${base_paths[@]}"; do
        if [ -f "$path" ]; then
            echo "$path"
        elif [ -d "$path" ]; then
            find "$path" -type f
        else
            echo "Warning: '$path' not found" >&2
        fi
    done > "$temp_base"
else
    # No paths provided, scan current directory
    find . -type f > "$temp_base"
fi

# Process include patterns
if [ "${#include_patterns[@]}" -gt 0 ]; then
    while IFS= read -r file; do
        for pattern in "${include_patterns[@]}"; do
            if [[ "$file" =~ $pattern ]]; then
                echo "$file" >> "$temp_includes"
                break
            fi
        done
    done < <(find . -type f)
else
    touch "$temp_includes"
fi

# Combine base files and included files, sort and remove duplicates
sort -u "$temp_base" "$temp_includes" > "$temp_all"

# Process ignore patterns and output final results
if [ "${#ignore_patterns[@]}" -gt 0 ]; then
    while IFS= read -r file; do
        # Check if file matches any ignore pattern
        matched=0
        for pattern in "${ignore_patterns[@]}"; do
            if [[ "$file" =~ $pattern ]]; then
                matched=1
                break
            fi
        done
        # Output file if it doesn't match any ignore patterns
        if [ "$matched" -eq 0 ]; then
            echo "$file"
        fi
    done < "$temp_all"
else
    cat "$temp_all"
fi
