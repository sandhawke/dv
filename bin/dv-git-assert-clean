#!/bin/bash
source $(dv-path lib/common.sh) # -*-mode: sh-mode -*-

message=''

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --silent) export DV_SILENT=true ;;
        --message=*) message="$(echo $1 | cut -c 11-)" ;;
        *) log_error "Unknown parameter: $1"; exit 1 ;;
    esac
    shift
done

# Check if current directory is a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_info "Not a git directory.  Consider

git init && echo .dv >> .gitignore && git add -A && git commit -m'initial files'

"
    exit 1
fi

# Check for various types of changes
untracked=$(git ls-files --others --exclude-standard)
unstaged=$(git diff --name-only)
staged=$(git diff --cached --name-only)

# If any changes are detected, provide helpful error and suggestions
if [ -n "$untracked" ] || [ -n "$unstaged" ] || [ -n "$staged" ]; then
    log_error 'Command requires there be no unsaved changes.'
    log_warning "$message"

    # Show what type of changes were found
    if [ -n "$untracked" ]; then
        log_info "## Untracked files:"
        log_info "$untracked"
    fi

    if [ -n "$unstaged" ]; then
        log_info "## Unstaged changes:"
        log_info "$unstaged"
    fi

    if [ -n "$staged" ]; then
        log_info "## Staged changes:"
        log_info "$staged"
    fi

    log_info "

## Consider:
git status
git add -A && git commit
git clean -n   # preview what git clean would do
git clean -fd  # remove untracked files and directories
git restore .  # discard changes to tracked files
git stash      # save changes for later
"
    exit 1
fi

exit 0
