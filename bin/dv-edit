#!/bin/bash
source $(dv-path lib/common.sh) # -*-mode: sh-mode -*-

cmd=$(basename $0)
usage() {
    cat <<EOF

Usage: $cmd [--help] [options] [packmime paths]

Feed the given paths to the AI with the given prompt. By default
(without --force), requires a git-clean directory, so you can see the
changes with `git diff` and undo them with `git reset --hard HEAD`.

Options:
  --help           Show this help message and exit
  --prompt=|-p     set the prompt, defaults to use DV_PROMPT if set
  [any unpackmime option, like --force]
  [any packmime option, like --ignore]

If dv-setting git-auto-commit=true, will git add and commit the edits,
so to see changes use `git show` and undo with `git  reset --hard HEAD~1`.

EOF
    exit 1
}

c1=()
c2=()
force=false
prompt="${DV_PROMPT:-}"
ask=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            usage
            ;;
        --ask)
            ask=true
            shift
            ;;
        --prompt=*)
            prompt=$(cut <<<"$1" -c 10-)
            shift
            ;;
        -p*)
            prompt=$(cut <<<"$1" -c 3-)
            shift
            ;;
        --force)
            # unpackmime flag, but we also want the flag for checking
            force=true
            c2+=("$1)
            shift
            ;;
        --patch|--preserve|--dryrun|--exclude-from)
            # unpackmime args
            c2+=("$1)
            shift
            ;;
        --use-ignore-file)
            # both args
            c1+=("$1)
            c2+=("$1)
            shift
            ;;
        *)
            # default to packmime args
            c1+=("$1")
            shift
            ;;
    esac
done

if [ "$force" = 'false' ]; then
    dv-git-assert-clean
fi

log=$(dv-project-dir)/.dv/edits/$(uuidgen -r | cut -c 29-)
rm -f $(dv-project-dir)/.dv/latest-edit
ln -s "$log" $(dv-project-dir)/.dv/latest-edit

infile="$log/to-ai.mime"
outfile="$log/from-ai.mime"
export DV_LOGFILE="$log/events"

mkdir -p "$log"
log_info "Logging to '$log'"

args=()

if [ -n "$prompt" ]; then
    args+=(user-prompt="$prompt")
    echo "$prompt" > "$log/prompt.md"
else
    log_error "Missing prompt. Use --prompt or DV_PROMPT or dv-edit-*"
    exit 1
fi

args+=(--ignore="*~")
args+=(--ignore=.dv)
args+=(--ignore=_from_developer)
args+=(--ignore=package-lock.json)

# we want to send this, but it's probably in .gitignore so it will be
# left out by packmime unless we say this
if [ -d _to_developer ]; then
    args+=(--include=_to_developer)
fi

# args+=()

# all the passthru args, which should include paths
if [ ${#c1[@]} -eq 0 ]; then
    log_info "No paths given, defaulting to '.'"
    c1+=(.)
fi
args+=("${c1[@]}")

# if git?  if what??  We want this even if we're not doing auto-commit
args+=(commit_message_prompt="Please attach a file '$commit_message_file' which is a clearly written, professional git commit message for all the file changes you are now providing. If you are not making any changes, skip this step.")

if [ "$ask" = 'true' ]; then
    args+=(response_prompt="Please format your response as plain text a terminal.")
else
    args+=(response_prompt="$(< $(dv-path prompts/response-format.md))")
fi

dv-show-arguments "${args[@]}" > "$log/arguments-for-packmime"

packmime "${args[@]}" > "$infile"

rm -rf _from_developer

log_info "llpipe starting"

export LLPIPE_LOG_RESPONSE="$log/http-response.txt"
llpipe < "$infile" > "$outfile"

log_info "llpipe exit value $?"

if [ "$ask" = 'true' ]; then
    log_info "Using 'ask' mode, just outputing response"
    echo -e "
================ AI Response ================${GREEN}
$(< $outfile)${NC}
=============================================
"
    exit 0
fi

# Clean up args a little better?  But we might change args of unpackmime.
# TODO: define interface a bit better. Like "--patch" should be the default
# and be called --safe, I think? or --git-safe?

if [ "$force" = 'false' ]; then
    c2+=(--patch)
fi
  
c2+=("$outfile")
dv-show-arguments "${c2[@]}" > "$log/arguments-for-unpackmime"

unpackmime "${c2[@]}" > "$log/unpack-stdout.txt"

cat "$log/unpack-stdout.txt"

# Some prompts may involved stuff being written here.  Should abstract
# the name of this, since it might have semantics to some AIs. Like
# $DIR_FROM_AI and $DIR_TO_AI but with possible quoting issues.

if [ -d _from_developer ]; then
    from="$log/_from_developer"
    log_info saving _from_developer to $from
    mkdir -p "$from"
    cp -a _from_developer "$from"
fi

if [ -f explanation ]; then
    # consider: add explanation to commit message, or otherwise make
    # it long-term saved?  Also, saving the command history here, or
    # at least the main prompt?
    echo -e "
================ AI Explanation ================${GREEN}
$(< explanation)${NC}
================================================
"
    mv explanation "$log/explanation"
fi

if dv-settings --check git-auto-commit=true; then
    dv-git-commit
fi

log_info "Details saved to $log"
