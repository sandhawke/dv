#!/bin/bash
source $(dv-path lib/common.sh) # -*-mode: sh-mode -*-

# tries to be robust and re-try components, so exit code 1 means
# unrecoverable error, don't bother continuing a script that's using
# this.

cmd=$(basename $0)
usage() {
    cat <<EOF

Usage: $cmd [--help] [options] [packmime paths]

Feed the given paths to the AI with the given prompt. By default
(without --force), requires a git-clean directory, so you can see the
changes with `git diff` and undo them with `git reset --hard HEAD`.

Options:
  --help           Show this help message and exit
  -sNAME           Use the saved prompt named NAME
  -tTEXT           Use TEXT as a prompt
  --prompt=|-p     Like -t if it includes a space, -s otherwise
  -S/-P/-T         The same as -s/-p/-t but for the system prompt
  [any unpackmime option, like --force]
  [any packmime option, like --ignore]

If dv-setting auto-commit=true, will git add and commit the edits, so
to see changes use `git show` and undo with `git reset --hard HEAD~1`.

EOF
    exit 1
}

c1=()
c2=()
force=false
prompt="${DV_PROMPT:-}"
ask=false

function prompt_divide() {
    if [[ -n "$prompt" ]]; then
        prompt="$prompt

"
    fi
}

function use_saved_prompt() {
    prompt_divide
    prompt="${prompt}$(dv-prompt-select "$1")"
    log_info "Using saved prompt '$1'"
}

function use_text_prompt() {
    prompt_divide
    prompt="${prompt}$1"
}

function use_auto_prompt() {
    local key="$1"
    if [[ $key =~ ' ' ]]; then
        use_text_prompt "$key"
    else
        use_saved_prompt "$key"
    fi
}

function concatenate_to_system_prompt() {
    local new_prompt="$1"
    if [ -z "${LLPIPE_SYSTEM_PROMPT:-}" ]; then
        export LLPIPE_SYSTEM_PROMPT="$new_prompt"
    else
        export LLPIPE_SYSTEM_PROMPT="$LLPIPE_SYSTEM_PROMPT

$new_prompt"
    fi
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            usage
            ;;
        --ask)
            ask=true
            shift
            ;;
        --prompt=*)
            use_auto_prompt "$(cut <<<"$1" -c 10-)"
            shift
            ;;
        -p*)
            use_auto_prompt "$(cut <<<"$1" -c 3-)"
            shift
            ;;
        -P*)
            concatenate_to_system_prompt "$(use_auto_prompt "$(cut <<<"$1" -c 3-)")"
            shift
            ;;
        -s*)
            use_saved_prompt "$(cut <<<"$1" -c 3-)"
            shift
            ;;
        -S*)
            concatenate_to_system_prompt "$(use_saved_prompt "$(cut <<<"$1" -c 3-)")"
            shift
            ;;
        -t*)
            use_text_prompt "$(cut <<<"$1" -c 3-)"
            shift
            ;;
        -T*)
            concatenate_to_system_prompt "$(cut <<<"$1" -c 3-)"
            shift
            ;;
        --force)
            # unpackmime flag, but we also want the flag for checking
            force=true
            c2+=("$1")
            shift
            ;;
        --patch|--preserve|--dryrun|--exclude-from)
            # unpackmime args
            c2+=("$1")
            shift
            ;;
        --use-ignore-file)
            # both args
            c1+=("$1")
            c2+=("$1")
            shift
            ;;
        *)
            # default to packmime args
            c1+=("$1")
            shift
            ;;
    esac
done

if [ "$force" = 'false' ]; then
    dv-git-assert-clean --message="dv-edit needs things git-clean to start"
    was_clean=true
fi

dotdv="$(dv-project-dir)/.dv"
log="$(dv-path-create "$dotdv/edits" edit)"
mkdir -p "$log"
abslog=$(realpath "$log")
log_info "dv-edit keeping files in '$abslog'"

rm -f "$dotdv/latest-edit"
ln -s "$abslog" "$dotdv/latest-edit" # --force does weird things
# log_info "Currenlty also $dotdv/latest-edit"

infile="$log/to-ai.mime"
outfile="$log/from-ai.txt"
out2="$log/from-ai.mime"
export DV_LOGFILE="$log/events"
prompt_file="$log/combined_prompt.md"

args=()

function to_snake_case() {
    echo "$1" | \
        tr '[:upper:]' '[:lower:]' | \
        sed -E 's/[^a-zA-Z0-9]+/_/g' | \
        sed -E 's/^_+|_+$//g'
}

function add_prompt() {
    local title="$1"
    local value="$2"
    local tag="$(to_snake_case "$title")"
    log_debug "adding prompt section title '$title' tag '$tag'"
    args+=("$tag"="$value")
    echo -e "## $title\n\n$value\n" >> "$prompt_file"
}

if [ -n "$prompt" ]; then
    add_prompt "General Instructions" "$prompt"
    echo "$prompt" > "$log/prompt.md"
else
    log_error "Missing prompt. Use --prompt/-p/-s/-t or DV_PROMPT or dv-edit-*"
    exit 1
fi

args+=(--ignore="*~")
args+=(--ignore=.dv)
args+=(--ignore=_from_developer)
args+=(--ignore=package-lock.json)

remove_empty_files() {
   for file in "$@"; do
       [ -f "$file" ] && [ ! -s "$file" ] && rm "$file"
   done
   return 0
}

if [ -d _to_developer ]; then
    # we want to send this, but it's probably in .gitignore so it will be
    # left out by packmime unless we say this
    args+=(--include=_to_developer)
    
    # Sometimes the tests leave a working_directory we're not allowed to read
    # or traverse.
    chmod_log=_to_developer/chmod_changes_for_sending.txt
    chmod -Rv u+rX _to_developer 2>&1 | grep -v "' retained as" > "$chmod_log" || true

    # And sometimes they leave broken symlinks
    symlink_log=_to_developer/broken_symlink_report.txt
    dv-remove-broken-symlinks > "$symlink_log" 2>&1
    
    remove_empty_files "$chmod_log" "$symlink_log"
fi

# all the passthru args, which should include paths
if [ ${#c1[@]} -eq 0 ]; then
    log_info "No paths given, defaulting to '.'"
    c1+=(.)
fi
args+=("${c1[@]}")

if [ "$ask" = 'true' ]; then
    add_prompt "Response Format" "Please format your response as plain text for display on a terminal."
else
    add_prompt "Provide Commit Message" "$(dv-prompt-select attach-commit-message | dv-template-fill filename="$commit_message_file")"
    # BROKEN - add_prompt "Patches May Be Useful" "$(dv-prompt-select use-patch)"
    add_prompt "Response Format" "$(dv-prompt-select response-format)"
fi

dv-show-arguments "${args[@]}" > "$log/arguments-for-packmime"
dv-quote-arguments "packmime" "${args[@]}" > "$log/packmime.sh"

log_info running packmime

packmime "${args[@]}" > "$infile"

rm -rf _from_developer

log_info "llpipe starting"

for try in {1..10}; do
    if [[ $try > 5 ]]; then
        log_error 'Unable to get Content-Type response from llpipe'
        exit 1
    fi
    
    export LLPIPE_LOG_RESPONSE="$log/http-response-$try.txt"
    # echo BEFORE "LLPIPE_LOG_RESPONSE='$LLPIPE_LOG_RESPONSE' llpipe < '$infile' | tee '$outfile'"

    # should be instead handled with LLPIPE_SHOW
    if [ -n "${DV_VERBOSE:-}" ]; then
        llpipe < "$infile" | tee "$outfile"
    else
        llpipe < "$infile" > "$outfile"
    fi

    if [ "$ask" = 'true' ]; then
        log_info "Using 'ask' mode, just outputing response"
        echo -e "
================ AI Response ================${GREEN}
$(fmt -s $outfile)${NC}
=============================================
"
        exit 0
    fi

    if grep -q 'Content-Type:' "$outfile"; then
        break
    fi

    # We could be here because the llm gave 0 tokens, due to some kind of
    # failure, or maybe it just completely misbehaved. In either case, let's
    # try again a few times.

    save="${outfile}-$try"
    cp -a "$outfile" "$save"
    log_warning "Response from llpipe did not include 'Content-Type:', saved as $save"
    log_debug sleeping a little
    sleep 5
done
    
if [ "$force" = 'false' ]; then
    c2+=(--patch)
fi

# seems unnecessary, but I'm trying to track down a bug
if [ "$force" = 'false' ]; then
    dv-git-assert-clean --message="dv-edit sees things git-dirty after llpipe"
fi

# text before Content-Type goes to _pre_mime, the rest goes to $out2
awk "/Content-Type:/{p=NR}; p{print > \"$out2\"; next} {print > \"_pre_mime\"}" "$outfile"

if [[ -f commit_message ]]; then
    echo "error prone: there should not be a file called commit_message in '$PWD'"
    exit 1
fi

c2+=("$out2")
dv-show-arguments "${c2[@]}" > "$log/arguments-for-unpackmime"

log_info "unpacking $(wc --bytes < "$out2") byte file"
unpackmime "${c2[@]}" | tee "$log/unpack-stdout.txt"

dv-patch-runner

if [ ! -f "$commit_message_file" ]; then
    if [[ -f commit_message ]]; then
        log_warning 'AI put commit_message in the wrong place, moving'
        mkdir_for_files "$commit_message_file"
        mv commit_message "$commit_message_file"
    else
        mkdir -p "$(dirname "$commit_message_file")"
        echo "AI generation failed to produce commit message" > $commit_message_file
    fi
fi

if [ -d _from_developer ]; then
    cp -a _from_developer "$log"
fi

if [ -f explanation ]; then
    echo '==== separate explanation file ====' >> _pre_mime
    cat explanation >> _pre_mime
    rm explanation
fi
if [ -f _pre_mime ]; then
    echo -e "
================ AI Explanation ================${GREEN}
$(fmt -s _pre_mime)${NC}
================================================
"
    echo "

Additional explanation from AI 
==============================

$(< _pre_mime)
" >> $commit_message_file
    mv _pre_mime "$log"
fi

echo "

General instructions given to AI
================================

$prompt
" >> $commit_message_file

# add software, tokens, model, etc?   get llpipe to save these somewhere?kill

if [[ -f _pre_mime ]]; then
    echo _pre_mime still exists here after it should have just been moved
    exit 1
fi

if [[ -f _from_developer/error ]]; then
    log_warning "The AI signalled an error, but we will continue since it cries wolf a lot."
    echo -e "
================ AI Error ================${YELLOW}
$(< _from_developer/error)${NC}
==========================================
"
fi

if [[ $was_clean = true ]]; then
    dv-cltest-regression-block
fi

# is there a way to signal back that changes were made?  stdout like
# with dv-test?

if dv-settings --check auto-commit=true; then
    dv-commit
fi

log_info "dv-edit done, logs in '$abslog'"
